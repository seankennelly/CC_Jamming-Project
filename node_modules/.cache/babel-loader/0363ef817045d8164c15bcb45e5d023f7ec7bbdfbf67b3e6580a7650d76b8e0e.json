{"ast":null,"code":"const clientID = \"8d1630484a144b1f8b60f6a0e3a40435\";\nconst redirectUrl = \"http://localhost:3000/\";\nlet accessToken = \"\";\nconst Spotify = {\n  getAccessToken() {\n    // First check for the access token\n    if (accessToken) return accessToken;\n    const tokenInURL = window.location.href.match(/access_token=([^&]*)/);\n    const expiryTime = window.location.href.match(/expires_in=([^&]*)/);\n\n    // Second check for the access token\n    if (tokenInURL && expiryTime) {\n      // setting access token and expiry time variables\n      accessToken = tokenInURL[1];\n      const expiresIn = Number(expiryTime[1]);\n\n      // Setting the access token to expire at the value for expiration time\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      // clearing the url after the access token expires\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    // Third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse) {\n        console.error(\"Response error\");\n      }\n      return jsonResponse.tracks.items.map(t => ({\n        id: t.id,\n        name: t.name,\n        artist: t.artists[0].name,\n        album: t.album.name,\n        uri: t.uri\n      }));\n    });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris) return;\n    const aToken = Spotify.getAccessToken();\n    const header = {\n      Authorization: `Bearer ${aToken}`\n    };\n    let userId;\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: header\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      let playlistId;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: header,\n        method: \"post\",\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n          headers: header,\n          method: \"post\",\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientID","redirectUrl","accessToken","Spotify","getAccessToken","tokenInURL","window","location","href","match","expiryTime","expiresIn","Number","setTimeout","history","pushState","redirect","search","term","fetch","method","headers","Authorization","then","response","json","jsonResponse","console","error","tracks","items","map","t","id","name","artist","artists","album","uri","savePlaylist","trackUris","aToken","header","userId","playlistId","body","JSON","stringify","uris"],"sources":["/Users/ken/Documents/Web_Development/IT Career Switch/codecademy/react/Jamming_Project/jamming/src/util/Spotify.js"],"sourcesContent":["const clientID = \"8d1630484a144b1f8b60f6a0e3a40435\";\nconst redirectUrl = \"http://localhost:3000/\";\n\nlet accessToken = \"\";\n\nconst Spotify = {\n  getAccessToken() {\n    // First check for the access token\n    if (accessToken) return accessToken;\n\n    const tokenInURL = window.location.href.match(/access_token=([^&]*)/);\n    const expiryTime = window.location.href.match(/expires_in=([^&]*)/);\n\n    // Second check for the access token\n    if (tokenInURL && expiryTime) {\n      // setting access token and expiry time variables\n      accessToken = tokenInURL[1];\n      const expiresIn = Number(expiryTime[1]);\n\n      // Setting the access token to expire at the value for expiration time\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      // clearing the url after the access token expires\n      window.history.pushState(\"Access token\", null, \"/\");\n      return accessToken;\n    }\n\n    // Third check for the access token if the first and second check are both false\n    const redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\n    window.location = redirect;\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (!jsonResponse) {\n          console.error(\"Response error\");\n        }\n        return jsonResponse.tracks.items.map((t) => ({\n          id: t.id,\n          name: t.name,\n          artist: t.artists[0].name,\n          album: t.album.name,\n          uri: t.uri,\n        }));\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris) return;\n    const aToken = Spotify.getAccessToken();\n    const header = { Authorization: `Bearer ${aToken}` };\n    let userId;\n    return fetch(`https://api.spotify.com/v1/me`, { headers: header })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        let playlistId;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: header,\n          method: \"post\",\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n              {\n                headers: header,\n                method: \"post\",\n                body: JSON.stringify({ uris: trackUris }),\n              }\n            );\n          });\n      });\n  },\n};\n\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}